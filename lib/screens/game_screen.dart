// lib/screens/game_screen.dart - „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„ÉóÂØæÂøúÁâà
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../models/game_state.dart';
import '../models/puzzle_piece.dart';
import '../providers/game_providers.dart';
import '../services/att_service.dart';
import '../widgets/game_board_widget.dart';
import '../widgets/piece_tray_widget.dart';
import '../widgets/game_header_widget.dart';
import '../widgets/game_result_dialog.dart';
import '../widgets/att_dialog_widget.dart';
import '../services/admob_service.dart';

class GameScreen extends ConsumerStatefulWidget {
  const GameScreen({super.key});

  @override
  ConsumerState<GameScreen> createState() => _GameScreenState();
}

class _GameScreenState extends ConsumerState<GameScreen>
    with TickerProviderStateMixin {
  late AnimationController _hintAnimationController;
  String? _hintPieceId;
  bool _hasCompletedFirstGame = false;

  @override
  void initState() {
    super.initState();
    _hintAnimationController = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    );

    // „Ç≤„Éº„É†ÈñãÂßã
    WidgetsBinding.instance.addPostFrameCallback((_) {
      ref.read(gameStateProvider.notifier).startNewGame();
    });
  }

  @override
  void dispose() {
    _hintAnimationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final gameState = ref.watch(gameStateProvider);

    // „Ç≤„Éº„É†Áä∂ÊÖãÂ§âÂåñ„ÅÆÁõ£Ë¶ñ
    ref.listen<GameState>(gameStateProvider, (previous, current) {
      if (previous?.status != current.status) {
        _handleGameStatusChange(previous, current);
      }
    });

    return Scaffold(
      backgroundColor: const Color(0xFFF8F9FA),
      appBar: AppBar(
        title: const Text('„Éñ„É¨„Ç§„É≥„Éñ„É≠„ÉÉ„ÇØ„Çπ'),
        backgroundColor: const Color(0xFF2E86C1),
        foregroundColor: Colors.white,
        elevation: 0,
        actions: [
          IconButton(onPressed: _showPauseMenu, icon: const Icon(Icons.pause)),
        ],
      ),
      body: SafeArea(
        child: LayoutBuilder(
          builder: (context, constraints) {
            // üîß ÊîπÂñÑÔºöÁîªÈù¢„Çµ„Ç§„Ç∫„Å´Âøú„Åò„Åü„É¨„Ç§„Ç¢„Ç¶„ÉàÈÅ∏Êäû
            final isLandscape = constraints.maxWidth > constraints.maxHeight;
            final screenWidth = constraints.maxWidth;

            // Â§ß„Åç„Å™Ê®™ÁîªÈù¢„ÅÆÂ†¥Âêà„ÅØÂæìÊù•„É¨„Ç§„Ç¢„Ç¶„Éà„ÄÅ„Åù„Çå‰ª•Â§ñ„ÅØÊñ∞„É¨„Ç§„Ç¢„Ç¶„Éà
            if (isLandscape && screenWidth > 800) {
              return _buildLandscapeLayout(gameState, constraints);
            } else {
              return _buildPortraitLayout(gameState, constraints);
            }
          },
        ),
      ),
    );
  }

  /// üé® Êñ∞„Åó„ÅÑÁ∏¶‰∏¶„Å≥„É¨„Ç§„Ç¢„Ç¶„ÉàÔºà„É°„Ç§„É≥Ôºâ
  Widget _buildPortraitLayout(GameState gameState, BoxConstraints constraints) {
    final screenHeight = constraints.maxHeight;

    // „É¨„Ç§„Ç¢„Ç¶„ÉàÊØîÁéá„ÇíÂãïÁöÑË®àÁÆó
    final headerHeight = 90.0;
    final trayHeight = (screenHeight * 0.22).clamp(140.0, 220.0);

    return Column(
      children: [
        // „Ç≤„Éº„É†„Éò„ÉÉ„ÉÄ„Éº
        Container(
          height: headerHeight,
          child: GameHeaderWidget(
            gameState: gameState,
            onHintPressed: _useHint,
            onResetPressed: _resetGame,
          ),
        ),

        const SizedBox(height: 8),

        // üî• ÊîπÂñÑÔºö„É°„Ç§„É≥„Ç≤„Éº„É†Áõ§Èù¢ÔºàÊúÄÂ§ßÂåñÔºâ
        Expanded(
          child: Container(
            margin: const EdgeInsets.symmetric(horizontal: 16),
            child: Center(
              child: AspectRatio(
                aspectRatio: 1.0, // Ê≠£ÊñπÂΩ¢„Çí‰øùÊåÅ
                child: GameBoardWidget(
                  gameState: gameState,
                  hintPieceId: _hintPieceId,
                  hintAnimation: _hintAnimationController,
                  onPiecePlaced: _onPiecePlaced,
                ),
              ),
            ),
          ),
        ),

        const SizedBox(height: 8),

        // üî• ÊîπÂñÑÔºö‰∏ãÈÉ®„Éî„Éº„Çπ„Éà„É¨„Ç§ÔºàÊ®™„Çπ„ÇØ„É≠„Éº„É´Ôºâ
        Container(
          height: trayHeight,
          margin: const EdgeInsets.symmetric(horizontal: 16),
          child: PieceTrayWidget(
            pieces: gameState.pieces,
            onPieceSelected: _onPieceSelected,
            onPieceRotated: _onPieceRotated,
            isHorizontal: true, // üî• ÈáçË¶ÅÔºöÊ®™Âêë„Åç„É¨„Ç§„Ç¢„Ç¶„Éà
          ),
        ),

        const SizedBox(height: 16),
      ],
    );
  }

  /// üé® Ê®™ÁîªÈù¢„É¨„Ç§„Ç¢„Ç¶„ÉàÔºàÂ§ßÁîªÈù¢Áî®Ôºâ
  Widget _buildLandscapeLayout(
    GameState gameState,
    BoxConstraints constraints,
  ) {
    return Column(
      children: [
        // „Ç≤„Éº„É†„Éò„ÉÉ„ÉÄ„Éº
        GameHeaderWidget(
          gameState: gameState,
          onHintPressed: _useHint,
          onResetPressed: _resetGame,
        ),

        const SizedBox(height: 16),

        // „É°„Ç§„É≥„Ç≤„Éº„É†È†òÂüüÔºàÊ®™‰∏¶„Å≥Ôºâ
        Expanded(
          child: Row(
            children: [
              // „Ç≤„Éº„É†Áõ§Èù¢
              Expanded(
                flex: 3,
                child: Container(
                  margin: const EdgeInsets.symmetric(horizontal: 16),
                  child: GameBoardWidget(
                    gameState: gameState,
                    hintPieceId: _hintPieceId,
                    hintAnimation: _hintAnimationController,
                    onPiecePlaced: _onPiecePlaced,
                  ),
                ),
              ),

              // „Éî„Éº„Çπ„Éà„É¨„Ç§ÔºàÁ∏¶Ôºâ
              Expanded(
                flex: 2,
                child: PieceTrayWidget(
                  pieces: gameState.pieces,
                  onPieceSelected: _onPieceSelected,
                  onPieceRotated: _onPieceRotated,
                  isHorizontal: false, // Á∏¶Âêë„Åç„É¨„Ç§„Ç¢„Ç¶„Éà
                ),
              ),
            ],
          ),
        ),

        const SizedBox(height: 16),
      ],
    );
  }

  // ‰ª•‰∏ã„ÄÅÊó¢Â≠ò„ÅÆ„É°„ÇΩ„ÉÉ„Éâ„ÅØÂ§âÊõ¥„Å™„Åó
  void _handleGameStatusChange(GameState? previous, GameState current) {
    switch (current.status) {
      case GameStatus.completed:
        _onGameCompleted();
        _showResultDialog(true);
        break;
      case GameStatus.failed:
        _showResultDialog(false);
        break;
      default:
        break;
    }
  }

  void _onGameCompleted() {
    if (!_hasCompletedFirstGame) {
      _hasCompletedFirstGame = true;
      Future.delayed(const Duration(seconds: 2), () {
        _showATTDialogIfNeeded();
      });
    }
  }

  void _showATTDialogIfNeeded() {
    final attService = ref.read(attServiceProvider);
    if (attService.currentStatus == ATTStatus.notDetermined) {
      _showATTExplanationDialog();
    }
  }

  void _showATTExplanationDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) =>
          ATTExplanationDialog(onAccept: () {}, onDecline: () {}),
    );
  }

  /// üîß ÊîπÂñÑÔºö„Éî„Éº„ÇπÈÖçÁΩÆÂá¶ÁêÜ
  void _onPiecePlaced(String pieceId, PiecePosition position) {
    print('üéØ „Éî„Éº„ÇπÈÖçÁΩÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ: $pieceId at $position');

    try {
      ref.read(gameStateProvider.notifier).placePiece(pieceId, position);
      HapticFeedback.lightImpact();

      // ÈÖçÁΩÆÊàêÂäü„ÅÆ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ
      _showPlacementSuccess();
    } catch (e) {
      print('‚ùå „Éî„Éº„ÇπÈÖçÁΩÆ„Ç®„É©„Éº: $e');
      HapticFeedback.mediumImpact();
    }
  }

  void _onPieceSelected(String pieceId) {
    // „Éî„Éº„ÇπÈÅ∏ÊäûÊôÇ„ÅÆÂá¶ÁêÜÔºàÂøÖË¶Å„Å´Âøú„Åò„Å¶ÂÆüË£ÖÔºâ
    print('üéØ „Éî„Éº„ÇπÈÅ∏Êäû: $pieceId');
  }

  void _onPieceRotated(String pieceId) {
    ref.read(gameStateProvider.notifier).rotatePiece(pieceId);
    HapticFeedback.selectionClick();

    // ÂõûËª¢„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: const Text('„Éî„Éº„Çπ„ÇíÂõûËª¢„Åó„Åæ„Åó„Åü'),
        duration: const Duration(milliseconds: 500),
        backgroundColor: const Color(0xFF2E86C1),
        behavior: SnackBarBehavior.floating,
        margin: const EdgeInsets.only(bottom: 200, left: 20, right: 20),
      ),
    );
  }

  /// üéâ ÈÖçÁΩÆÊàêÂäüÊôÇ„ÅÆ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ
  void _showPlacementSuccess() {
    // ËªΩÂæÆ„Å™ÊàêÂäü„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
    // ÂøÖË¶Å„Å´Âøú„Åò„Å¶ÂÆüË£Ö
  }

  void _useHint() async {
    final gameState = ref.read(gameStateProvider);
    final unplacedPieces = gameState.pieces.where((p) => !p.isPlaced).toList();

    if (unplacedPieces.isNotEmpty) {
      final adService = ref.read(admobServiceProvider);
      final rewardEarned = await adService.showRewardedAd();

      if (rewardEarned) {
        setState(() {
          _hintPieceId = unplacedPieces.first.id;
        });

        _hintAnimationController.forward().then((_) {
          _hintAnimationController.reverse().then((_) {
            setState(() {
              _hintPieceId = null;
            });
          });
        });

        ref.read(gameStateProvider.notifier).useHint();
      }
    }
  }

  void _resetGame() {
    showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('„Ç≤„Éº„É†„É™„Çª„ÉÉ„Éà'),
        content: const Text('ÁèæÂú®„ÅÆÈÄ≤Ë°åÁä∂Ê≥Å„Åå„É™„Çª„ÉÉ„Éà„Åï„Çå„Åæ„Åô„ÄÇ\n„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: const Text('„Ç≠„É£„É≥„Çª„É´'),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(true),
            child: const Text('„É™„Çª„ÉÉ„Éà'),
          ),
        ],
      ),
    ).then((confirmed) {
      if (confirmed == true) {
        ref.read(gameStateProvider.notifier).resetGame();
      }
    });
  }

  void _showPauseMenu() {
    ref.read(gameStateProvider.notifier).pauseGame();

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Text('‰∏ÄÊôÇÂÅúÊ≠¢'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              leading: const Icon(Icons.play_arrow),
              title: const Text('„Ç≤„Éº„É†ÂÜçÈñã'),
              onTap: () {
                Navigator.of(context).pop();
                ref.read(gameStateProvider.notifier).resumeGame();
              },
            ),
            ListTile(
              leading: const Icon(Icons.refresh),
              title: const Text('„É™„Çπ„Çø„Éº„Éà'),
              onTap: () {
                Navigator.of(context).pop();
                _resetGame();
              },
            ),
            ListTile(
              leading: const Icon(Icons.settings),
              title: const Text('Ë®≠ÂÆö'),
              onTap: () {
                Navigator.of(context).pop();
              },
            ),
            ListTile(
              leading: const Icon(Icons.home),
              title: const Text('„É°„Éã„É•„Éº„Å´Êàª„Çã'),
              onTap: () async {
                Navigator.of(context).pop();
                final adService = ref.read(admobServiceProvider);
                await adService.showInterstitialAd();
                if (mounted) {
                  Navigator.of(context).pop();
                }
              },
            ),
          ],
        ),
      ),
    );
  }

  void _showResultDialog(bool isSuccess) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => GameResultDialog(
        isSuccess: isSuccess,
        gameState: ref.read(gameStateProvider),
        onPlayAgain: () {
          Navigator.of(context).pop();
          ref.read(gameStateProvider.notifier).startNewGame();
        },
        onBackToMenu: () async {
          Navigator.of(context).pop();
          final adService = ref.read(admobServiceProvider);
          await adService.showInterstitialAd();
          if (mounted) {
            Navigator.of(context).pop();
          }
        },
      ),
    );
  }
}

final admobServiceProvider = Provider<AdMobService>((ref) {
  return AdMobService.instance;
});
